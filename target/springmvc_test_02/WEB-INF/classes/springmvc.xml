<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
                            http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/mvc
                            http://www.springframework.org/schema/mvc/spring-mvc.xsd
                            http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- 自动扫描 -->
    <context:component-scan base-package="com.test.springmvc.crud"></context:component-scan>

    <!-- 配置视图解析器 -->
    <bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>

    <!-- 在实际开发中通常都需配置mvc:annotation-driven 标签 -->
    <!-- 开启springmvc框架的支持
        enable-matrix-variables true不需要再单独配置Json转换器
    -->
    <mvc:annotation-driven conversion-service="conversionService2" enable-matrix-variables="true" ></mvc:annotation-driven>
    <!--
        default-servlet-handler 将在 SpringMVC 上下文中定义一个 DefaultServletHttpRequestHandler,
        它会对进入 DispatcherServlet 的请求进行筛查, 如果发现是没有经过映射的请求, 就将该请求交由 WEB 应用服务器默认的
        Servlet 处理. 如果不是静态资源的请求，才由 DispatcherServlet 继续处理

        一般 WEB 应用服务器默认的 Servlet 的名称都是 default.
        若所使用的 WEB 服务器的默认 Servlet 名称不是 default，则需要通过 default-servlet-name 属性显式指定
    -->
    <mvc:default-servlet-handler></mvc:default-servlet-handler>

    <!-- 配置ConversionService类型转换器
        所有注册的Converter实例对象都可以在RequestParamMethodArgumentResolverd的binder属性中的conversionServices属性中查看到

        用FormattingConversionServiceFactoryBean
        既可以添加自定义的类型转换器,又可以使用springmvc提供的格式化作用
    -->
    <bean id="conversionService2" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <ref bean="studentServiceConverer"></ref>
            </set>
        </property>
    </bean>

    <!-- 配置国际化资源文件ResourceBundleMessageSource -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="i18n"></property>
        <!-- 支持UTF-8的中文 -->
        <property name="cacheSeconds" value="0"/>
        <property name="defaultEncoding" value="UTF-8"/>
    </bean>

    <!-- 不通过控制器直接访问 -->
<!--    <mvc:view-controller path="/i18n" view-name="i18n"></mvc:view-controller>-->
    <mvc:view-controller path="/i18n2" view-name="i18n2"></mvc:view-controller>
    <mvc:view-controller path="/fileupload" view-name="fileupload"></mvc:view-controller>

    <!-- 国际化页面配置（通过超链接选择语言那种)
	配置SessionLocaleResolver用于将Locale对象存储于Session中供后续使用(这里的Id只能用这个：localeResolver，否则会出问题)   第一步：
	-->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver"></bean>

    <!-- 配置MultipartResolver
    文件上传
    -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 文件编码格式 -->
        <property name="defaultEncoding" value="UTF-8"></property>
        <!-- 最大上传字节 -->
        <property name="maxUploadSize" value="1024000"></property>
    </bean>


    <!-- 配置国际化页面拦截器（通过超链接选择语言那种）配置LocaleChangeInterceptor
        主要用于获取请求中的locale信息，将期转为Locale对像，获取LocaleResolver对象    第二步：
    -->
    <mvc:interceptors>
        <bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"></bean>
    </mvc:interceptors>

</beans>